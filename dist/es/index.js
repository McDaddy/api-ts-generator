import e from"axios";import r from"query-string";import{compile as o,pathToRegexp as t}from"path-to-regexp";const n=/^http(s)?:\/\/(.*?)\//,s=["GET","POST","PUT","DELETE"];let a={};const l=(e,r)=>{try{let t="";const s=new RegExp(n).exec(e);s&&([t]=s);return`${t}${o(e.replace(n,""))(r)}`}catch(r){throw console.error("path:",e,"Error parsing url parameters"),r}},c=function(o){const{api:c,method:p="GET",successMsg:i}=o,u=p.toUpperCase();if(!s.includes(u))throw new Error(`Invalid method: ${p}`);return o=>{const s=o||{},{$options:d,$body:y}=s,f=function(e,r){var o={};for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&r.indexOf(t)<0&&(o[t]=e[t]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(t=Object.getOwnPropertySymbols(e);n<t.length;n++)r.indexOf(t[n])<0&&Object.prototype.propertyIsEnumerable.call(e,t[n])&&(o[t[n]]=e[t[n]])}return o}(s,["$options","$body"]),{bodyOrQuery:h,pathParams:m}=((e,r)=>{const o=[];t(e.replace(n,"/"),o);const s={},a=Object.assign({},r);return o.length>0&&o.forEach((({name:e})=>{s[e]=a[e],delete a[e]})),{pathParams:s,bodyOrQuery:a}})(c,f),{isDownload:g,uploadFileKey:O,rawResponse:b,onUploadProgress:E}=d||{};let P,v=h;return["POST","PUT"].includes(u)?(Object.keys(h).length&&(P=O?h[O]:h),v={}):"DELETE"===u&&(P=y),e({method:p,url:l(c,m),params:v,paramsSerializer:e=>r.stringify(e),responseType:g?"blob":"json",data:P,onUploadProgress:E}).then((e=>{var r;return b?e:["POST","PUT"].includes(u)?(a.onSuccess&&"function"==typeof a.onSuccess&&(null!=i?i:null==d?void 0:d.successMsg)&&a.onSuccess(null!=i?i:null==d?void 0:d.successMsg),null==e?void 0:e.data):null===(r=null==e?void 0:e.data)||void 0===r?void 0:r.data})).catch((e=>{throw console.error("api err: ",e),e}))}};function p(e){return c(e)}const i=e=>{a=e};export{p as apiCreator,p as default,c as genRequest,i as initApiGenerator};
